package chapter08;

import java.io.File;
//
/*
 * 
 *  8.5 File 클래스
 *  
 * 		 File 클래스란?
 *  
 *  'File 클래스'는 파일안 디렉터리에 대해, 경로명, 크기, 타입, 수정 날짜 등의 속성 정보를 제공하고, 파일 삭제,
 *  디렉터리 생성, 파일 이름 변경, 디렉터리 내의 파일 리스트 제공 등 다양한 '파일 관리' 작업을 제공한다. 
 *  
 *  File 클래스에서는 파일 입출력 입출력 기능은 없다. 파일을 읽고 쓰는 것은 앞서 공부한 FileInputStream, FileOutputStream,
 *  FileReader, FileWriter 등 파일 입출력 클래스를 이용해야 한다.
 *  
 *  
 *  
 *  
 *  	File 객체 생성
 *  
 *  File 객체의 생성의 <표 8-12>의 생성자를 이용한다. 예를 들어 c:\Temp\Test.txt 파일의 객체는 다음과 같이 생성한다.
 *  
 *  		File f=new File("c:\\Temp\\test.txt");
 *  		File f=new File("c:\\Temp\\test.txt");
 *  
 *  
 *  
 *  	<표 8-12>	File 클래스의 생성자
 *  
 *  ---------------------------------------------------------------------------------------------------------
 *  		메소드 							|					설명
 *  ---------------------------------------------------------------------------------------------------------
 *  	File(File parent,String child)		| parent 디렉터리에 child 이름의 서브 디렉터리나 파일을 나타내는 File의 객체 생성
 *  ---------------------------------------------------------------------------------------------------------
 *  	File(String pathname)				| pathname의 완전 경로명이 나타내는 File 객체 생성
 *  ---------------------------------------------------------------------------------------------------------
 * 		File(String parent, String child)	| parent 디렉터리에 child 이름의 서브 디렉터리나 파일을 나타내는 File 객체 생성
 * ----------------------------------------------------------------------------------------------------------
 * 		File(URI uri)						| file:URI를 추상 경로명으로 변환하여 File 객체 생성
 * 
 *  
 *  
 *  
 *  
 *  
 *  
 *  		File 클래스를 이용한 파일 및 디렉터리 관리
 *  
 *  File 클래스의 메소드를 이용하면, 파일 크기와 타입을 알아내고, 파일 삭제, 이름 변경, 디렉터리 변경, 디렉터리의 파일 리스트 없기 등
 *  다양한 파일 관리 작업을 수행할 수 있다. File 클래스의 주요 메소드는 <표 8-13>과 같다. 
 *  
 *  
 *  
 *  
 *  <표 8-13>	File클래스의 주요 메소드
 *  ------------------------------------------------------------------------------------------------------
 *  	메소드						|				설명
 *  ------------------------------------------------------------------------------------------------------
 *  	boolean mkdir()				| 디렉터리 내의 파일과 서브 디렉터리 리스트를 문자열 배열로 리턴
 *  ------------------------------------------------------------------------------------------------------
 *  	String []list()				| 디텍터리 내의 파일과 서브 디렉터리 리스트를 File [] 배열로 리런
 *  ------------------------------------------------------------------------------------------------------
 *  	boolean renameTo(File dest) | dest가 지정하는 경로명으로 파일 이름 변경
 *  ------------------------------------------------------------------------------------------------------
 *  	boolean delete()			| 파일 또는 디렉토리 삭제
 *  ------------------------------------------------------------------------------------------------------
 *  	long length()				| 파일의 크기 리턴
 *  ------------------------------------------------------------------------------------------------------
 *  	String getPath()			| 경로명 전체를 문자열로 변환하여 리턴
 *  ------------------------------------------------------------------------------------------------------
 *  	String getName()			| 파일 또는 디렉터리 이름을 문자열로 리턴
 *  ------------------------------------------------------------------------------------------------------
 *  	boolean isFile()			| 일반 파일이면 true 리턴
 *  ------------------------------------------------------------------------------------------------------
 *  	boolean isDirectory()		| 디렉터리이면 true 리턴
 *  ------------------------------------------------------------------------------------------------------
 *  	long lastModified()			| 파일이 마지막으로 변경된 시간 리턴
 *  ------------------------------------------------------------------------------------------------------
 *  	boolean exists()			| 파일 또는 디렉터리가 존재하면 true 리턴
 *  ------------------------------------------------------------------------------------------------------
 *  
 *  
 *  
 *  
 *  	* 파일 크기, length()
 *  
 *  length()는 파일이나 디렉터리의 크기를 리턴한다. 예를 들면 다음과 같다.
 *  
 *  	File f=new File("c:\\windows\\system.ini");	// 파일 크기는 219바이트
 *  	long size=f.length();	// size=219
 *  
 *  
 *  파일이 존재하지 않거나, 디렉터리 혹은 운영체제 종속적인 장치 파일인 경우, length()는 운영체제에 따라 0을
 *  리턴하기도 한다.
 *  
 *  
 *  
 *  
 *  
 *  	* 파일의 경로명, getName(), getPath(), getParent()
 *  
 *  
 *  getName()은 파일명만, getPath()는 완전경로명을, getParent()는 부모 디렉터리를 문자열로 리턴한다.
 *  
 *  
 *  			String filename=f.getName()		// "system.ini"
 *  			String path=f.getPath()			// "c:\\windows\\system.ini"
 *  			String parent=f.getParent()		// "c:\\windows"
 *  
 *  
 *  
 *  	* 파일 타입 판별, isFile()과 isDirectory()
 *  
 *  isFile()과 isDirectory()는 경로명이 파일인지 디렉터리인지 따라 true/false를 리턴한다. 예를 들면
 *  다음과 같다.
 *  
 *  
 *  
 *  			if(f.isFile())
 *  				System.out.println(f.getPath()+"는 파일입니다.");
 *  			else(f.isDirectory())
 *  				System.out.println(f.getPath()+"는 디렉터리입니다.");
 *  
 *  
 *  system.ini는 당연히 파일이므로 아래와 같이 출력된다.
 *  
 *  		c:\windows\system.ini는 파일입니다.
 *  
 *  
 *  
 * 
 * 
 * 
 * 
 * 
 * 
 * 			* 디렉터리에 있는 파일 리스트 얻기, listFiles()
 * 
 * 
 * File 객체가 디렉터리의 경로명을 가진 경우, 디렉터리의 모든 파일과 '서브디렉터리의 리스트'를 얻을 수 있다. list()
 * 는 파일과 서브디렉터리 경로명을 문자열 배열을 (String[])로 리턴하는 반면, listFiles()는 파일과 서브디렉터리 경로명을 File[]
 * 배열로 리턴한다. 다음 코드는 listFiles() 메소드를 이용하여 c:\Temp 디렉터리에 있는 모든 파일과 서브디렉터리의 이름을 출력한다.
 * 
 * 
 * */
	

// page.473
public class FileEx {

	
	public static void listDirectory(File dir){
		System.out.println("----"+dir.getPath()+"의 서브 리스트입니다.-----");

		File[] subFiles=dir.listFiles();// 디렉토리에 포함된 파일과 디렉토리 이름의 리스트 얻기
		
		for(int i=0;i<subFiles.length;i++){// 디렉토리에 포함된 파일과 디렉토리 이름의 리스트 읽기
			File f=subFiles[i];
			long t=f.lastModified();// 마지막으로 수정된 시간
			System.out.println(f.getName());// 이름 가져오기
			System.out.println("\t파일 크기: "+f.length());// 파일 크기
			System.out.printf("\t 수정한 시간: %tb %td %ta %tT \n",t,t,t,t); // 포맷 출력
			
		}
		
	}
	
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		File f1=new File("c:\\windows\\system.ini");
		System.out.println(f1.getPath()+", "+f1.getParent()+", "+f1.getName());
		
		String res="";
		
		if(f1.isFile())res="파일";	// 파일 타입이면
		else if(f1.isDirectory()) res="디렉토리"; // 디렉토리 타입이면
		System.out.println(f1.getPath()+"은 "+res+"입니다.");
		
		
		File f2=new File("c:\\Temp\\java_sample"); //새로 만들고자 하는 디렉터리
		if(!f2.exists()){	// f2 디렉터리가 존재하는지 검사
			f2.mkdir();
		}
		
		
		listDirectory(new File("C:\\Temp"));// c:\Temp에 있는 파일 리스트 출력
		f2.renameTo(new File("c:\\Temp\\javasample"));// java_sample-> javasample로 이름 변경
		
		listDirectory(new File("c:\\Temp")); // javasample로 변경한 후 리스트 출력

	}

}
