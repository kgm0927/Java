import javax.swing.*;
import java.awt.*;


/*		9.1 자바의 GUI
 * 
 * GUI 응용프로그램이란?
 * 
 * GUI란 Graphical User Interface의 약자로서 이미지 혹은 그래픽을 이용하여 메뉴 등을 포함하는
 * 화면을 구성하고, 키보드 외 마우스 등의 편리한 입력 도구를 이용하여 사용자가 입력하기 편하도록 만들어진
 * 사용자 인터페이스다.
 * 
 * 자바는 'AWT'와 'Swing 패키지'등 어떤 언어보다 강력한 GUI 라이브러리를 제공하여, 소프트웨어 개발자들이 다양한
 * GUI를 쉽게 구성하도록 해 준다.
 * 
 * 
 * 
 * AWT와 Swing 패키지
 * 
 * 자바 언어는 GUI 응용프로그램을 쉽게 작성할 수 있도록 다양한 GUI 컴포넌트를 재공하다. 자바의 GUI 컴포넌트는 AWT 컴포넌트와
 * Swing 컴포넌트로 구분되며, 이들을 각각 java.awt 패키지와 javax.swing 패키지를 통해 공급된다.
 * 
 * 
 * 
 * 
 * * AWT
 * 
 * AWT(Abstract Windowing Toolkit)는 자바가 처음 나왔을 때 배포된 패키지로서 많은 GUI 컴포넌트를 포함한다. Frame,
 * Window, Panel, Dialog, Button, Label, TextField, CheckBox, Choice 등의 AWT의 컴포넌트 들은 중량 컴포넌트(heavy
 * Weight Component)로 불리는데, 이 컴포넌트들은 운영체제의 도움을 받아 화면에 출력되기 때문에 운영체제의 자원을 많이 소모하여 운영체제에
 * 많은 영향을 준다.
 * 
 * 
 * * 스윙(Swing)
 * 
 * 스윙(Swing)은 AWT와 달리 순수 자바 언어로 작성되었다. 운영체제의 도움을 받지 않기 때문에 스윙컴포넌트는 경량 컴포넌트(light weight component)라고
 * 불린다. 그러므로 스윙 컴포넌트들은 운영체제와 관계없이 항상 동일하게 작동하며 동일한 모양으로 그려진다. 
 * 
 * 모든 AWT 컴포넌트들이 100% 호환되도록 스윙 컴포넌트로 다시 작성되었으며, 스윙 컴포넌트의 이름은 AWT 컴포넌트와 구분하기 위해 모두 대문자 J로 시작한다.
 * 또한 선마이크로시스템조사는 AWT에 없는 풍부한 고급 스윙 컴포넌트들을 추가적으로 개발하였다. 스윙은 AWT에 구현된 이벤트 처리나 GUI 컴포넌트의 기본 원리를
 * 바탕으로 작성되었기 때문에, 스윙을 사용하기 위해 AWT 패키지가 필요하다.
 * 
 * 
 * * AWT보다 스윙 사용 권장
 * 
 * 개발자는 AWT와 스윙 중 택일하여 GUI 응용프로그램을 개발할 수 있다. 이들 두 라이브러리는 동작하는 방식이 다르고, 응용프로그램을
 * 작성하는 방법에도 차이가 있다.
 * 
 *  
 *  
 *  
 *  
 * 9.2 자바 GUI 패키지
 * 
 * GUI 패키지 계층 구조
 * 
 * GUI 응용프로그램을 사용하기 위해 주요 클래스들의 상속관계가 있다. 모든 GUI 컴포넌트는 Component 클래스를 반드시 상속받으며, 스윙 컴포넌트의
 * 클래스 명은 모두 J로 시작한다. AWT 컴포넌트는 Button, Label 등과 같이 Component를 직접 상속받는 것들과 Panel, Frame 등과 같이
 * Container 를 상속받는 것들이 있다. 그리고 JApplet, JFrame, JDialog를 제외한 모든 스윙 컴포넌트는 JComponent를 상속받는다.
 * 
 * Font, Dimension, Color, Graphics 등은 컴포넌트가 아니지만, 문자의 폰트 설정, 색, 도형 그리기 등 그래픽 작업이 반드시 필요하다.
 * 
 * 
 * 
 * 		컨테이너와 컴포넌트 
 * 
 * 자바의 GUI 응용프로그램은 GUI 컴포넌트들로 구성되며, GUI 컴포넌트들은 다른 컴포넌트를 포함할 수 있는지 여부에 따라 순수 컴포넌트와 컨테이너로
 * 분류된다. 
 * 
 * 
 * 
 * 
 * 
 * * 컨테이너
 * 
 * 컨테이너란 다른 GUI 컴포넌트를 포함할 수 있는 컴포넌트이다. 그러므로 컨테이너는 컴포넌트이면서 동시에 컨테이너이다. 컨테이너가 되기 위해서는 java.awt.
 * Container 클래스를 상속받아야 한다. Container 클래스는 java.awt.Compoenent를 상속받기 때문에 컨테이너가 컴포넌트이기도 한 것이다.
 * 컨테이너는 다른 컨테이너에 컴포넌트로 포함될 수 있다. 컨테이너로 작동하는 클래스는 다음과 같다.
 * 
 * 
 * Frame, Panel, Applet, Dialog, Window // AWT 컨테이너
 * JFrame, JPanel, JApplet, JDialog, JWindow // 스윙 컨테이너
 * 
 * 
 * 
 * * 컴포넌트
 * 
 * 한편, '컴포넌트'란 컨테이너와 달리 다른 컴포넌트를 포함할 수 없으며, 컨테이너에 포함되어야 비로소 화면에 출력될 수 있는 GUI 객체이다.
 * AWT나 스윙의 모든 컴포넌트들은 java.awt.Component를 상속받기 때문에, Component 클래스에는 모든 컴포넌트들의 공통적인 속성과 기능이
 * 작성되어 있다. 
 * 
 * 
 * 또한 순수 스윙 컴포넌트들은 모두 javax.swing.JComponent를 상속받으며, JComponent에는 스윙 컴포넌트의 공통적인 기능이 작성되어 있다.
 * 
 * 
 * 
 * * 최상위 컨테이너
 * 
 * 컨테이너 중에 다른 컨테이너에 속하지 않고 독립적으로 화면에 출력될 수 있는 컨테이너를 최상위 컨테이너(Top Level Container)라고 한다.
 * JFrame,JDialog, JApplet의 3가지가 이에 속한다. 그러나 이들을 제외한 나머지 컨테이너나 컴포넌트들은 다른 컨테이너에 부착되어야 하고,
 * 종국에는 최상위 컨테이너에 부착되어야만 화면에 출력된다.
 * 
 * 
 * 
 * 
 * * 컨테이너와 컴포넌트의 포함 관계
 * 
 * 자바 스윙 응용프로그램은 JFrame과 같은 최상위 컨테이너 위에 컨테이너와 컴포넌트들이 마치 레고 블록을 쌓는 것처럼 컨테이너와 컴포넌트의 
 * 계층구조로 구성되어, 컨테이너에 부착된 컴포넌트들을 '자식 컴포넌트'라고 부른다.
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 9.3 스윙 GUI 프로그램 만들기
 * 
 * 스윙으로 GUI 응용프로그램을 만들기 위해서는 다음의 세 과정이 필요하다.
 * 
 * 1. 스윙 프레임 작성
 * 2. main() 메소드 작성
 * 3. 프레임에 스윙 컴포넌트 붙이기
 * 
 * 
 * 
 * 
 * 		스윙 패키지를 사용을 위한 import 문
 * 
 * 
 * 스윙 패키지를 이용하기 위해서는 스윙 컴포넌트의 클래스 파일들이 존재하는 경로명 javax.swing.*를 import 해야 한다.
 * 
 * 대부분의 스윙 응용프로그램은 이벤트 처리, 이미지나 도형을 그리는 부분을 필수적으로 동반하므로, 다음과 같은 import문이 필요한
 * 경우가 많다.
 * 
 * 
 * import java.awt.*;			// 폰트 등 그래픽 처리를 위한 클래스들의 경로명
 * import java.awt.event.*;		// 이벤트 처리에 필요한 기본 클래스들의 경로명
 * import javax.swing.*;		// 스윙 컴포넌트 클래스들의 경로명
 * import javax.swing.event.*;	// 스윙 이벤트 처리에 필요한 클래스들의 경로명
 * 
 * 
 * 
 * 		스윙 프레임과 컨텐트팬
 * 
 * 
 * 스윙 프레임은 모든 스윙 컴포넌트들을 담는 최상위 컨테이너(Top Level Container)이다.
 * 스윙 프레임이 출력될 때, 스윙 프레임 내에 부착된 모든 컴포넌트들이 화면에 출력된다. 컴포넌트들은
 * 스윙 프레임 없이 독립적으로 화면에 출력될 수 없다. 스윙 프레임이 닫히면 프레임 내의 모든 컴포넌트들도
 * 프레임과 함께 화면에서 사라진다.
 * 
 * 
 * 스윙에서 프레임의 역할을 수행하는 클래스가 JFrame이다. JFrame 객체가 생성되면 만들어진다. JFrame
 * (java.awt.Frame), 메뉴바(MenuBar),컨텐트팬(ContentPane)의 세 공간으로 구성된다. Frame은 AWT
 * 패키지에 있는 클래스로서 JFrame 상속받기 때문에 당연히 그 속성들이 존재하며, 메뉴바는 메뉴들을 부착하는 공간이고,
 * '컨텐트팬'은 메뉴를 제외한 모든 GUI 컴포넌트들을 부착하는 공간이다. 스윙 응용프로그램 개발자는 메뉴를 만들어 JFrame
 * 의 메뉴바에 부착하여야 하며, 화면에 출력하고자 하는 GUI 컴포넌트들은 모두 컨텐트팬에 부착하여야 한다.
 * 
 * 
 * 
 * 
 * 		프레임 만들기, JFrame 클래스 상속
 * 
 * 스윙 응용프로그램의 프레임은 JFrame을 상속받아 만들면 된다. 다음은 JFrame 을 상속받아 MyFrame클래스를 만든 사례이다.
 * 
 * 
 * public class MyFrame extends JFrame{
 * }
 * 
 * 
 * 
 * MyFrame의 객체가 생성되면 스윙 프레임의 역할을 하게 된다. MyFrame 클래스에 main() 클래스를 두고, main()에서 다음과
 * 같이 MyFrame의 객체를 생성하면 스윙 프레임이 탄생한다.
 * 
 */


public class MyFrame extends JFrame{

	
	public MyFrame(){
		setTitle("300x300 스윙 프레임 만들기");
		setSize(300,300);
		setVisible(true);
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		MyFrame frame=new MyFrame();
	}

}
/**
 * 
 * SetTitle(), SetSize(), SetVisible() 메소드는 모두 JFrame의 멤버이다. 이 코드에서 SetSize(300,300)을 호출하지 않으면
 * 프레임의 크기가 0이 되어 화면에 출려되지 않는다. 또한 setVisible(true)를 호출하지 않는다면 프레임의 디폴트 속성이 invisible(보이지
 * 않는 상태)이므로 역시 화면에 출력되지 않는다.
 * 
 * MyFrame 객체가 생성되면 스윙 프레임이 화면에 출력되고, 사용자로부터 키나 마우스를 입력받으면서 스스로 동작한다.
 * 
 * 
 * 
 * 		스윙 프로그램에서 main() 메소드의 기능과 위치
 * 
 * 스윙 프로그램에서 main()의 기능은 최소화하는 것이 좋다. main()에는 스윙 응용프로그램이 실행되는 시작점으로서 프레임을 생성하는 코드 정도만
 * 만들고, 나머지는 프레임 클래스에 작성하는 것이 좋다.
 * 
 * 
 * 
 * main() 메소드는 MyFrame 클래스에 두거나, main() 메소드만을 가진 새로운 클래스에 둘 수도 있다.
 * 
 
 * 
 * 
 * 
 */
